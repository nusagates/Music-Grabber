<?php

/**
 * This class used to handling on fetching data from archive.org
 *
 * @author Nusagates <nusagates@gmail.com>
 */
class helper {

    private $source = "https://archive.org/metadata/";
    private $index;
    private $count;
    private $files;
    private $result;

    /**
     * 
     * @param String identifier is package data identifier generated by archive.org automatically 
     * @return String identifier
     * @example example/fetchData.php description
     */
    public function fetchData($source) {
        return $this->source = str_replace("details", "metadata", $source);
    }

    /**
     * 
     * @return Json
     */
    public function getResult() {
        #Set url for the package music want to fetched
        $json = file_get_contents($this->fetchData($this->source));
        #encode json
        return $this->result = json_decode($json);
        for ($i = 0; $i < count($data->files); $i++) {
            if ($data->files[$i]->format === "VBR MP3") {
                #get mp3 length
                $length = $data->files[$i]->length;
                #get mp3 name/title
                $name = $data->files[$i]->name;
                #convert mp3 length to GMT time with format (minutes:seconds)
                $duration = gmdate("i", $length) . ":" . gmdate("s", $length);
                $name . " " . $duration . "<br/>";
            }
        }
    }

    /**
     * This function is used for fetching music directory from archive.org server
     * @return string of music directory
     */
    public function getDir() {
        return $this->getResult()->d1 . $this->getResult()->dir;
    }

    /**
     * This function is used for fetching package identifier 
     * @return string 
     */
    public function getPackageIdentifier() {
        return $this->getResult()->metadata->identifier;
    }

    /**
     * This function is used for fetching package title 
     * @return string
     */
    public function getPackageTitle() {
        return $this->getResult()->metadata->title;
    }

    /**
     * This function is used for fetching package identifier 
     * @return string
     */
    public function getPackageSubject() {
        return $this->getResult()->metadata->subject;
    }

    /**
     * This function is used for fetching package date of added
     * @return string of Date
     */
    public function getPackageAddedDate() {
        return $this->getResult()->metadata->addeddate;
    }

    /**
     * This function is used for fetching package collection type 
     * @return array
     */
    public function getPackageCollectionType() {
        return $this->getResult()->metadata->collection;
    }

    /**
     * This function is used for fetching file lists of the package
     * @return array
     */
    public function getFileLists() {
        return $this->files = $this->result->files;
    }

    /**
     * This function is used for fetching files count of the package
     * @return integer
     */
    public function getFilesCount() {
        return $this->count = count($this->result->files);
    }

    /**
     * 
     * @param integer $index is the file index on the package
     * @return string
     */
    public function getFilesFormat($index) {
        return $this->result->files[$index]->format;
    }

    /**
     * 
     * @param integer $index is the file index on the package
     * @return double
     */
    public function getFilesLength($index) {
        return $this->result->files[$index]->length;
    }

    /**
     * 
     * @param integer $index is the file index on the package
     * @return string
     */
    public function getFilesName($index) {
        return $this->result->files[$index]->name;
    }

    /**
     * 
     * @param integer $index is the file index on the package
     * @return string
     */
    public function getFilesDuration($index) {
        return gmdate("i", $this->getFilesLength($index)) . ":" . gmdate("s", $this->getFilesLength($index));
    }
    /**
     * This function is used to get mp3 lists of the package
     * @return array
     */
    public function getMp3List() {
        for ($i = 0; $i < count($this->result->files); $i++) {
            if ($this->result->files[$i]->format === "VBR MP3") {
                $lists[] = $this->getFilesName($i);
            }
        }
        return $lists;
    }

}
